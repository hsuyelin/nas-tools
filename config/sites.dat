
ewogICAgImlkIjogInlpZGlhbnl1YW4iLAogICAgIm5hbWUiOiAiXHU0ZjBhXHU3NTM4XHU1NmVkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdC5oZGJkLnVzLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZ1t0aXRsZV1bc3JjPVwicGljL2NhdHRyYW5zLmdpZlwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQ6aGFzKFwiYVt0aXRsZV1cIikiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLCBhLCBiIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZDpoYXMoXCJhW3RpdGxlXVwiKSA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=




ewogICAgImlkIjogImRtaHkiLAogICAgIm5hbWUiOiAiXHU1MmE4XHU2ZjJiXHU4MmIxXHU1NmVkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9kbWh5Lm9yZy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3BpY3MvbGlzdD9rZXl3b3JkPXtrZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogInRvcGljcy9saXN0L3BhZ2Uve3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudGFibGVzb3J0ZXIgPiB0Ym9keSA+IHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCIvdG9waWNzL2xpc3Qvc29ydF9pZC9cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC50aXRsZSA+IGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnRpdGxlID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhLmRvd25sb2FkLWFycm93LmFycm93LW1hZ25ldCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgxKSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=


ewogICAgImlkIjogImJhaWNodWFuIiwKICAgICJuYW1lIjogIlx1NzY3ZVx1NWRkZCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3LmhpdHB0LmNvbS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=


ewogICAgImlkIjogIm1pa2FuYW5pIiwKICAgICJuYW1lIjogIlx1ODcxY1x1NjdkMSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vbWlrYW5pbWUudHYvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogdHJ1ZSwKICAgICJwcm94eSI6IHRydWUsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAiSG9tZS9TZWFyY2g/c2VhcmNoc3RyPXtrZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogIkhvbWUvQ2xhc3NpYy97cGFnZX0iLAogICAgICAgICJzdGFydCI6IDEKICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuY2VudHJhbC1jb250YWluZXIgPiB0YWJsZSA+IHRib2R5ID4gdHIuanMtc2VhcmNoLXJlc3VsdHMtcm93IgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRyLmpzLXNlYXJjaC1yZXN1bHRzLXJvdyIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtaXRlbWluZGV4IgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDEpID4gYS5tYWduZXQtbGluay13cmFwIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMSkgPiBhLm1hZ25ldC1saW5rLXdyYXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDEpID4gYS5qcy1tYWduZXQubWFnbmV0LWxpbmsiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLWNsaXBib2FyZC10ZXh0IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==


ewogICAgImlkIjogImJvamlueHVleXVhbiIsCiAgICAibmFtZSI6ICJcdTk0YzJcdTkxZDFcdTViNjZcdTk2NjIiLAogICAgImRvbWFpbiI6ICJodHRwczovL3B0Y2hpbmEub3JnLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcy9cdTc1MzVcdTVmNzEiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXMvXHU3NTM1XHU4OWM2XHU1MjY3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvY3VtZW50YXJpZXMvXHU3ZWFhXHU1ZjU1XHU3MjQ3IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicG9zdGVyIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZ1tkYXRhLW9yaWddIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiZGF0YS1vcmlnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBiID4gc3Bhblt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYS50b3JyZW50cy10YWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzdWJqZWN0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLmVtYmVkZGVkOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdltzdHlsZV0gPiBzcGFuIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAic3BhbixhLGltZyxmb250LGIiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==

ewogICAgImlkIjogIk5ZQUEiLAogICAgIm5hbWUiOiAiTllBQSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vbnlhYS5zaS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICI/Zj0wJmM9MF8wJnE9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAiP3A9e3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudC1saXN0ID4gdGJvZHkgPiB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3ZpZXcvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykgPiBhW2hyZWYqPVwiL2Rvd25sb2FkL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=


ewogICAgImlkIjogIkpQVFYiLAogICAgIm5hbWUiOiAiSlBUViIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vanB0di5jbHViLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzL2ZpbHRlcj9zZWFyY2g9e2tleXdvcmR9IiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAidG9ycmVudHMvZmlsdGVyP3BhZ2U9e3BhZ2V9IiwKICAgICAgICAic3RhcnQiOiAxCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LnRhYmxlLXJlc3BvbnNpdmUgPiB0YWJsZSA+IHRib2R5ID4gdHIiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYS52aWV3LXRvcnJlbnQiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhLnZpZXctdG9ycmVudCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYS52aWV3LXRvcnJlbnQiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cInRvcnJlbnRzL2Rvd25sb2FkL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpID4gdGltZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogInNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg5KSA+IGEgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDEwKSA+IGEgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDExKSA+IGEgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9zcGFuL2lbQGNsYXNzPSdmYXMgZmEtc3RhciB0ZXh0LWdvbGQnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vc3BhbltAY2xhc3M9J2JhZGdlLWV4dHJhIHRleHQtZ3JlZW4nXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogInppeW91bm9uZ2NoYW5nIiwKICAgICJuYW1lIjogIlx1ODFlYVx1NzUzMVx1NTE5Y1x1NTczYSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vcHQuMGZmLmNjLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAicG9zdGVyIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZ1tkYXRhLW9yaWddIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiZGF0YS1vcmlnIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBiID4gc3Bhblt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2ID4gYS50b3JyZW50cy10YWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzdWJqZWN0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLmVtYmVkZGVkOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdltzdHlsZV0gPiBzcGFuIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDIpIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAic3BhbixhLGltZyxmb250LGIiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDIpID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9pbWdbQGNsYXNzPSdoaXRhbmRydW4nXSIKICAgICAgICBdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9

ewogICAgImlkIjogImNvbWljYXQiLAogICAgIm5hbWUiOiAiXHU2ZjJiXHU1NWI1IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly93d3cuY29taWNhdC5vcmciLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInNlYXJjaC5waHA/a2V5d29yZD17a2V5d29yZH0mcGFnZT17cGFnZX0iLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiI2RhdGFfbGlzdCB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtb2YtdHlwZSgzKSBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZml0bGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInNob3ctKFxcdyspLmh0bWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLW9mLXR5cGUoMykgYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1vZi10eXBlKDMpIGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAic3BsaXQiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICItIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJzcGxpdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIi4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImFwcGVuZGxlZnQiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJtYWduZXQ6P3h0PXVybjpidGloOiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLW9mLXR5cGUoOCkgYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLW9mLXR5cGUoNCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1vZi10eXBlKDUpIHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtb2YtdHlwZSg2KSBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtb2YtdHlwZSgxKSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ewogICAgImlkIjogIlVsdHJhSEQiLAogICAgIm5hbWUiOiAiVWx0cmFIRCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vdWx0cmFoZC5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibWluaW11bXJhdGlvIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5oaXRhbmRydW4iOiAzLAogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWluaW11bXNlZWR0aW1lIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5oaXRhbmRydW4iOiAxMjA5NjAwLAogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9
ewogICAgImlkIjogInNoYW9iYW9sZXl1YW4iLAogICAgIm5hbWUiOiAiXHU3MGU3XHU1MzA1XHU0ZTUwXHU1NmVkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdHNiYW8uY2x1Yi8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMoXHU3NTM1XHU1ZjcxKSIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInR2IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNlcmllcyhcdTc1MzVcdTg5YzZcdTUyNjcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL090aGVyIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNob3dzKFx1NzUzNVx1ODljNlx1ODI4Mlx1NzZlZSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucyhcdTUyYThcdTZmMmIpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvY3VtZW50YXJpZXMoXHU4YmIwXHU1ZjU1XHU3MjQ3KSIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cInRvcnJlbnRzLnBocD9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg5KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkW2NsYXNzPVwiZW1iZWRkZWRcIl0gPiBmb250ID4gc3Bhblt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdGQiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogImZlaXRpYW5sYW1pYW4iLAogICAgIm5hbWUiOiAiXHU5OGRlXHU1OTI5XHU2MmM5XHU5NzYyIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9mc20ubmFtZS8iLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogIlRvcnJlbnRzIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAia2V5d29yZCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJiYXRjaCI6IHsKICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICB9LAogICAgImJyb3dzZSI6IHt9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LnRhYmxlLXJlc3BvbnNpdmUgPiB0YWJsZS50YWJsZS1ib3JkZXJlZCA+IHRib2R5ID4gdHIiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHM/dGlkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgzKSA+IGRpdj4gYSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykgPiBkaXY+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddWzA6ODBdIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddWzA6ODBdIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzP3RpZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDkpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZFtjbGFzcz1cImVtYmVkZGVkXCJdID4gYiA+IHNwYW5bdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXY+IGEiLAogICAgICAgICAgICAgICAgImluZGV4IjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBkaXYudGFncyA+IGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtaW5pbXVtcmF0aW8iOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1pbmltdW1zZWVkdGltZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogOTAwMDAKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==
ewogICAgImlkIjogImhvbmdkb3VmYW4iLAogICAgIm5hbWUiOiAiXHU3ZWEyXHU4YzQ2XHU5OTZkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9oZGZhbnMub3JnLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcy9cdTc1MzVcdTVmNzEiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXMvXHU3NTM1XHU4OWM2XHU1MjY3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvY3VtZW50YXJpZXMvXHU3ZWFhXHU1ZjU1XHU3MjQ3IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTYsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWIFNob3dzL1x1N2VmY1x1ODI3YSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRpb25zL1x1NTJhOFx1NmYyYiIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGRbY2xhc3M9XCJlbWJlZGRlZFwiXSA+IGZvbnQgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkOm50aC1jaGlsZCgyKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogImEsaW1nLHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyID4gdGQ6bnRoLWNoaWxkKDIpID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9

ewogICAgImlkIjogImhhbmhhbiIsCiAgICAibmFtZSI6ICJcdTYxYThcdTYxYTgiLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJwcm94eSI6IGZhbHNlLAogICAgImRvbWFpbiI6ICJodHRwczovL2hoYW5jbHViLnRvcC8iLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iLAogICAgICAgICAgICAic2VhcmNoX2FyZWEiOiAxCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJiYXRjaCI6IHsKICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICB9LAogICAgImJyb3dzZSI6IHt9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LnRvcnJlbnQtdGFibGUtc3ViLWluZm8iCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0W109XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LWluZm8tdGV4dC1zaXplIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYudG9ycmVudC1pbmZvLXRleHQtc2VlZGVycyA+IGFbaHJlZio9XCIjc2VlZGVyc1wiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LWluZm8tdGV4dC1sZWVjaGVycyA+IGFbaHJlZio9XCIjbGVlY2hlcnNcIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LnRvcnJlbnQtaW5mby10ZXh0LWFkZGVkID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi50b3JyZW50LWluZm8tdGV4dC1hZGRlZCA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLWZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJzcGFuLnByb21vdGlvbi10YWctZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgInNwYW4ucHJvbW90aW9uLXRhZy01MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgInNwYW4ucHJvbW90aW9uLXRhZy01MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgInNwYW4ucHJvbW90aW9uLXRhZy0zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLTUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgInNwYW4ucHJvbW90aW9uLXRhZy1mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAic3Bhbi5wcm9tb3Rpb24tdGFnLTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYudG9ycmVudC1pbmZvLXRleHQtc21hbGxfbmFtZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBzcGFuLnRhZyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIkFuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1hdGlvbnMvXHU1MmE4XHU2ZjJiIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucy9cdTUyYThcdTZmMmIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1OGZkZVx1N2VlZFx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9kaXZbQGNsYXNzPSd3aGl0ZXNwYWNlLW5vd3JhcCddL3NwYW5bQGNsYXNzPSdwcm9tb3Rpb24tdGFnLWZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2RpdltAY2xhc3M9J3doaXRlc3BhY2Utbm93cmFwJ10vc3BhbltAY2xhc3M9J3Byb21vdGlvbi10YWctMnhmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbCiAgICAgICAgICAgICIvL3NwYW5bY29udGFpbnModGV4dCgpLCAnSCZSJyldIgogICAgICAgIF0sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3NlZWRlci1jb3VudCddIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAibmV4dXNfcGhwIgp9



ewogICAgImlkIjogImJhaXR1IiwKICAgICJuYW1lIjogIlx1NzY3ZFx1NTE1NCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vY2x1Yi5oYXJlcy50b3AvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCxpbWcucHJvXzUwcGN0ZG93bixpbWcucHJvXzUwcGN0ZG93bjJ1cCxpbWcucHJvXzMwcGN0ZG93biIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImRhdGEtZCIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZHs0fS1cXGR7Mn0tXFxkezJ9IFxcZHsyfTpcXGR7Mn06XFxkezJ9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYubGF5dWktdG9ycmVudHMtU3ViamVjdCA+IGRpdi5sZWZ0ID4gcC5sYXl1aS1lbGlwLmxheXVpLXRvcnJlbnRzLWRlc2NyLXdpZHRoIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5sYXl1aS10b3JyZW50cy1TdWJqZWN0ID4gZGl2LmxlZnQgPiBwLmxheXVpLWVsaXAubGF5dWktdG9ycmVudHMtZGVzY3Itd2lkdGggPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vYltAY2xhc3M9J2ZyZWUnXVt0ZXh0KCk9J1x1NTE0ZFx1OGQzOSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vYltAY2xhc3M9J3R3b3VwZnJlZSddW3RleHQoKT0nMlhcdTUxNGRcdThkMzknXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogW10KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9


ewogICAgImlkIjogImhhaXRhbmciLAogICAgIm5hbWUiOiAiXHU2ZDc3XHU2OGUwIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly93d3cuaHRwdC5jYy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BpZD0ncGVlcmNvdW50J10vYlsxXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==

ewogICAgImlkIjogIm1hb3poYW4iLAogICAgIm5hbWUiOiAiXHU3MzJiXHU3YWQ5IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdGVyY2x1Yi5jb20vIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiXHU3NTM1XHU1ZjcxIChNb3ZpZSkiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJcdTc1MzVcdTg5YzZcdTUyNjcgKFRWIFBsYXkpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDMsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlx1NTJhOFx1NmYyYiAoQW5pbWUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlx1N2VmY1x1ODI3YSAoVFYgU2hvdykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiXHU3ZWFhXHU1ZjU1XHU3MjQ3IChEb2N1bWVudGFyeSkiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdjpudGgtY2hpbGQoMSkgPiBhID4gYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nW2RhdGEtb3JpZ10iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLW9yaWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IGEudG9ycmVudHMtdGFnIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIoLy90ZFtAYWxpZ249J2xlZnQnIGFuZCBAY2xhc3M9J3Jvd2ZvbGxvdycgYW5kIEB2YWxpZ249J3RvcCddL2JbMV0pWzNdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAibmV4dXNfcGhwIgp9
ewogICAgImlkIjogImJlaWJpbmd5YW5nIiwKICAgICJuYW1lIjogIlx1NTMxN1x1NmQwYlx1NTZlZCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3LnRqdXB0Lm9yZy8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICItIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXNcdTc1MzVcdTVmNzEiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZXNcdTUyNjdcdTk2YzYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvd3NcdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9uc1x1NTJhOFx1NmYyYiIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiY2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJpbWRiLmNvbS90aXRsZS90dFwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJmb250LmZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJmb250LnR3b3VwZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImZvbnQuaGFsZmRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImZvbnQudHdvdXBoYWxmZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiZm9udC50aGlydHlwZXJjZW50IjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImZvbnQudHdvdXBoYWxmZG93biI6IDIsCiAgICAgICAgICAgICAgICAgICAgImZvbnQudHdvdXBmcmVlIjogMiwKICAgICAgICAgICAgICAgICAgICAiZm9udC50d291cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRyOm50aC1jaGlsZCgxKSA+IHRkOm50aC1jaGlsZCgyKSIsCiAgICAgICAgICAgICAgICAicmVtb3ZlIjogImEsIGltZywgZGl2IiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0cjpudGgtY2hpbGQoMikgPiB0ZDpudGgtY2hpbGQoMikgPiBkaXYjdGFnID4gZm9udC50YWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtaW5pbXVtcmF0aW8iOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6IDAuOAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9mb250W0BjbGFzcz0ndHdvdXAnXVt0ZXh0KCk9JzJYJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbCiAgICAgICAgICAgICIvL2ZvbnRbQGNvbG9yPSdyZWQnXVt0ZXh0KCk9J0hpdCZSdW4nXSIKICAgICAgICBdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9
ewogICAgImlkIjogInpodXF1ZSIsCiAgICAibmFtZSI6ICJcdTY3MzFcdTk2YzAiLAogICAgImRvbWFpbiI6ICJodHRwczovL3podXF1ZS5pbi8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwYXJzZXIiOiAiVE5vZGVTcGlkZXIiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnQvc2VhcmNoIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiY2hyb21lIiwKICAgICAgICAgICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgImtleXdvcmQiOiAiLy9pbnB1dFtAaWQ9XCJmb3JtX2l0ZW1fa2V5d29yZFwiXSIsCiAgICAgICAgICAgICAgICAgICAgInN1Ym1pdCI6ICIvL2Zvcm0vL2J1dHRvbltAdHlwZT1cInN1Ym1pdFwiXSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIlJFTkRFUiI6IHRydWUsCiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL3NwYW5bQGNsYXNzPSd0ZXh0LWRvd25sb2FkJ11bY29udGFpbnModGV4dCgpLCcweCcpXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIiCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFsKICAgICAgICAgICAgIi8vZGl2W0BjbGFzcz0nYW50LWZvcm0taXRlbS1jb250cm9sLWlucHV0LWNvbnRlbnQnXS9zcGFuW2NvbnRhaW5zKHRleHQoKSwnXHU2YjYzXHU1NzI4XHU1MDVhXHU3OWNkOiApXSIKICAgICAgICBdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogInRub2RlIgp9
ewogICAgImlkIjogImlIREJpdHMiLAogICAgIm5hbWUiOiAiaUhEQml0cyIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vaWhkYml0cy5tZS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jdW1lbnRhcmllcy9cdTdlYWFcdTVmNTVcdTcyNDciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWF0aW9ucy9cdTUyYThcdTZmMmIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1OGZkZVx1N2VlZFx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nW2RhdGEtb3JpZ10iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLW9yaWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBhLnRvcnJlbnRzLXRhZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuZW1iZWRkZWQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=








ewogICAgImlkIjogInF1ZWVuIiwKICAgICJuYW1lIjogIlx1NzY4N1x1NTQwZSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vb3Blbi5jZC8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiYmF0Y2giOiB7CiAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgfSwKICAgICJicm93c2UiOiB7fSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMTApIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGRbY2xhc3M9XCJlbWJlZGRlZFwiXSA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkLmVtYmVkZGVkID4gZm9udCIsCiAgICAgICAgICAgICAgICAiaW5kZXgiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZC5lbWJlZGRlZCA+IGkgPiBhIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHt9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9kaXZbQGNsYXNzPSd0aXRsZSddL2ltZ1tAY2xhc3M9J3Byb19mcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9kaXZbQGNsYXNzPSd0aXRsZSddL2ltZ1tAY2xhc3M9J3Byb19mcmVlMnVwJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogIm5hbnlhbmciLAogICAgIm5hbWUiOiAiXHU1MzU3XHU2ZDBiIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9uYW55YW5ncHQuY29tLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gZm9ybSA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogInR1bHVmYW4iLAogICAgIm5hbWUiOiAiXHU1NDEwXHU5YzgxXHU3NTZhIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdC5lYXN0Z2FtZS5vcmcvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogImxvbmd6aGlqaWEiLAogICAgIm5hbWUiOiAiXHU5Zjk5XHU0ZTRiXHU1YmI2IiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly93d3cuZHJhZ29uaGQueHl6LyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRzID4gdHI6aGFzKFwidGFibGUudG9ycmVudG5hbWVcIikiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNhdGVnb3J5IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCI/Y2F0PVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJpbWRiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiZGl2LmltZGJfMTAwID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0dFxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAwLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93biI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMzBwY3Rkb3duIjogMC4zLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZnJlZV9kZWFkbGluZSI6IHsKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlIjogInslIGlmIGZpZWxkc1snZG93bmxvYWR2b2x1bWVmYWN0b3InXT09MCAlfXt7bWF4X3RpbWV9fXslIGVuZGlmJX0iLAogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWVfZm9ybWF0IjogIiVZLSVtLSVkICVIOiVNOiVTLiVmIiwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJpbWcucHJvX2ZyZWUsaW1nLnByb19mcmVlMnVwIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAib25tb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrLVxcZCstXFxkKyBcXGQrOlxcZCs6XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkIiwKICAgICAgICAgICAgICAgICJjb250ZW50cyI6IC0xCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gdGFibGUgPiB0ciA+IHRkLmVtYmVkZGVkID4gc3BhbiIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==

ewogICAgImlkIjogImppYXl1YW4iLAogICAgIm5hbWUiOiAiXHU1YmI2XHU1NmVkIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9oZGhvbWUub3JnLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzLnBocCIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBhcmFtcyI6IHsKICAgICAgICAgICAgInNlYXJjaCI6ICJ7a2V5d29yZH0iCiAgICAgICAgfSwKICAgICAgICAiYmF0Y2giOiB7CiAgICAgICAgICAgICJkZWxpbWl0ZXIiOiAiICIsCiAgICAgICAgICAgICJzcGFjZV9yZXBsYWNlIjogIl8iCiAgICAgICAgfQogICAgfSwKICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAibW92aWUiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL1NEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyBTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDEyLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvU0QiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzIElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxMywKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyA3MjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MTQsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcy9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgMTA4MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyBSRU1VWCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDUwLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMvQmx1UmF5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIk1vdmllcyBCbHVyYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ5OSwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL0JsdVJheSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgVUhEIEJsdS1yYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxNiwKICAgICAgICAgICAgICAgICJjYXQiOiAiTW92aWVzL1VIRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMgMjE2MHAiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDE3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgU0QiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxOCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQxOSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIDcyMHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyMCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvRG9jdW1lbnRhcnkiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiRG9jIDEwODBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjEsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyBSRU1VWCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDUxLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgQmx1cmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA1MDAsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0RvY3VtZW50YXJ5IiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkRvYyBVSEQgQmx1LXJheSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDIyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2MgMjE2MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZNdXNpYyA3MjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWTXVzaWMgMTA4MGkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQyNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvU0QiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IFNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjYsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1NEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyBJUGFkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NzEsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1NEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyBJUGFkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjcsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyA3MjBwIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MjgsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyAxMDgwaSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDI5LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9IRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNob3cgMTA4MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzMCwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTaG93IFJFTVVYIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NTIsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvd3MgQmx1cmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzEsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2hvdyAyMTYwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDMyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9TRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyBTRCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDMzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9TRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyBJUGFkIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0hEIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIlRWU2VyaWVzIDcyMHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzNSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgMTA4MGkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzNiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgMTA4MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQzNywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgUkVNVVgiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ1MywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJlaXMgQmx1cmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MzgsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL1VIRCIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUVlNlcmllcyAyMTYwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNTAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9VSEQiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFZTZXJpZXMgNEsgQmx1cmF5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NDQsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIFNEIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0NDUsCiAgICAgICAgICAgICAgICAiY2F0IjogIlRWL0FuaW1lIiwKICAgICAgICAgICAgICAgICJkZXNjIjogIkFuaW1lIElQYWQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ0NiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgNzIwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDQ3LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSAxMDgwcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDQ4LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSBSRU1VWCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDU0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltZSBCbHVyYXkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQ0OSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgMjE2MHAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDUwMSwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYvQW5pbWUiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiQW5pbWUgVUhEIEJsdS1yYXkiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuW3N0eWxlXSIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4udGFncyIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0nZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSd0d291cGZyZWUnXSIKICAgICAgICBdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9kaXZbQGlkPSdwZWVyY291bnQnXS9iWzFdIgogICAgICAgIF0KICAgIH0sCiAgICAic3lzdGVtX3R5cGUiOiAiIgp9




ewogICAgImlkIjogInBlbmd5b3UiLAogICAgIm5hbWUiOiAiXHU2NzBiXHU1M2NiIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly9wdC5rZWVwZnJkcy5jb20vIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgImNhdGVnb3J5IjogewogICAgICAgICJtb3ZpZSI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWVzL1x1NzUzNVx1NWY3MSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogMzAxLAogICAgICAgICAgICAgICAgImNhdCI6ICJNb3ZpZXMiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiTW92aWUgUGFja3MvXHU3NTM1XHU1ZjcxKFx1NTQwOFx1OTZjNikiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ0diI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2N1bWVudGFyaWVzL1x1N2VhYVx1NWY1NVx1NzI0NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogMzA0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2N1bWVudGFyeSBQYWNrcy9cdTdlYWFcdTVmNTVcdTcyNDcoXHU1NDA4XHU5NmM2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRpb25zL1x1NTJhOFx1NmYyYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogMzA1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRpb24gUGFja3MvXHU1MmE4XHU2ZjJiKFx1NTQwOFx1OTZjNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1NTI2N1x1OTZjNiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogMzAyLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTZXJpZSBQYWNrcy9cdTUyNjdcdTk2YzYoXHU1NDA4XHU5NmM2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDMwMywKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2hvdyBQYWNrcy9cdTdlZmNcdTgyN2EoXHU1NDA4XHU5NmM2KSIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsYWJlbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0gPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudG5hbWUgPiB0ciA+IHRkIiwKICAgICAgICAgICAgICAgICJyZW1vdmUiOiAiYSxiIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICJuZXh1c19waHAiCn0=



ewogICAgImlkIjogImhhb2R1b3lvdSIsCiAgICAibmFtZSI6ICJcdTU5N2RcdTU5MWFcdTZjYjkiLAogICAgImRvbWFpbiI6ICJodHRwczovL3B0LmhkdXB0LmNvbS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50cyA+IHRyOmhhcyhcInRhYmxlLnRvcnJlbnRuYW1lXCIpIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9kZWZhdWx0IjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZV9vcHRpb25hbCI6IHsKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVt0aXRsZV1baHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddICV9e3sgZmllbGRzWyd0aXRsZV9vcHRpb25hbCddIH19eyUgZWxzZSAlfXt7IGZpZWxkc1sndGl0bGVfZGVmYXVsdCddIH19eyUgZW5kaWYgJX0iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP2NhdD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVwbGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIj8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJxdWVyeXN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogImNhdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkZXRhaWxzLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaW1kYmlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdi5pbWRiXzEwMCA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHRcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJvcHRpb25hbCI6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIG9yIGZpZWxkc1snZGF0ZV9hZGRlZCddICV9e3sgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBpZiBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGVsc2UgZmllbGRzWydkYXRlX2FkZGVkJ10gfX17JSBlbHNlICV9bm93eyUgZW5kaWYgJX0iLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZ3JhYnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb19mcmVlMnVwIjogMCwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24iOiAwLjUsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duMnVwIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzMwcGN0ZG93biI6IDAuMywKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInVwbG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fMnVwIjogMiwKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZyZWVfZGVhZGxpbmUiOiB7CiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZSI6ICJ7JSBpZiBmaWVsZHNbJ2Rvd25sb2Fkdm9sdW1lZmFjdG9yJ109PTAgJX17e21heF90aW1lfX17JSBlbmRpZiV9IiwKICAgICAgICAgICAgICAgICJkZWZhdWx0X3ZhbHVlX2Zvcm1hdCI6ICIlWS0lbS0lZCAlSDolTTolUy4lZiIsCiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nLnByb19mcmVlLGltZy5wcm9fZnJlZTJ1cCIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogIm9ubW91c2VvdmVyIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKy1cXGQrLVxcZCsgXFxkKzpcXGQrOlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlID4gdHIgPiB0ZC5lbWJlZGRlZCA+IHNwYW4iCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgInByaWNlIjogewogICAgICAgICJGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J2ZyZWUnXSIKICAgICAgICBdLAogICAgICAgICIyWEZSRUUiOiBbCiAgICAgICAgICAgICIvL2gxW0BpZD0ndG9wJ10vYi9mb250W0BjbGFzcz0ndHdvdXBmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiSFIiOiBbXSwKICAgICAgICAiUEVFUl9DT1VOVCI6IFtdCiAgICB9LAogICAgInN5c3RlbV90eXBlIjogIiIKfQ==
ewogICAgImlkIjogIkFDRy5SSVAiLAogICAgIm5hbWUiOiAiQUNHLlJJUCIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vYWNnLnJpcC8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICI/dGVybT17a2V5d29yZH0iLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgImJyb3dzZSI6IHsKICAgICAgICAicGF0aCI6ICJwYWdlL3twYWdlfSIsCiAgICAgICAgInN0YXJ0IjogMQogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRhYmxlLWhvdmVyID4gdHIiCiAgICAgICAgfSwKICAgICAgICAiZmllbGRzIjogewogICAgICAgICAgICAiaWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIi90L1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInNwYW4udGl0bGUgPiBhIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJzcGFuLnRpdGxlID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5hY3Rpb24gPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuZGF0ZSA+IHRpbWUiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRldGltZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuc2l6ZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucGVlcnMgPiBkaXYuc2VlZCA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5wZWVycyA+IGRpdi5sZWVjaCA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5wZWVycyA+IGRpdi5kb25lID4gc3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==

ewogICAgImlkIjogImNhciIsCiAgICAibmFtZSI6ICJcdThmNjYiLAogICAgImRvbWFpbiI6ICJodHRwczovL2NhcnB0Lm5ldC8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJzZWFyY2giOiB7CiAgICAgICAgInBhdGhzIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJ0b3JyZW50cy5waHAiLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwYXJhbXMiOiB7CiAgICAgICAgICAgICJzZWFyY2giOiAie2tleXdvcmR9IgogICAgICAgIH0sCiAgICAgICAgImJhdGNoIjogewogICAgICAgICAgICAiZGVsaW1pdGVyIjogIiAiLAogICAgICAgICAgICAic3BhY2VfcmVwbGFjZSI6ICJfIgogICAgICAgIH0KICAgIH0sCiAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgIm1vdmllIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaWQiOiA0MDEsCiAgICAgICAgICAgICAgICAiY2F0IjogIk1vdmllcyIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJNb3ZpZXMvXHU3NTM1XHU1ZjcxIgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidHYiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJpZCI6IDQwMiwKICAgICAgICAgICAgICAgICJjYXQiOiAiVFYiLAogICAgICAgICAgICAgICAgImRlc2MiOiAiVFYgU2VyaWVzL1x1OGZkZVx1N2VlZFx1NTI2NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDAzLAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9BbmltZSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJBbmltYXRpb25zL1x1NTJhOFx1NmYyYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA0LAogICAgICAgICAgICAgICAgImNhdCI6ICJUVi9Eb2N1bWVudGFyeSIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJEb2N1bWVudGFyaWVzL1x1N2VhYVx1NWY1NVx1NzI0NyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImlkIjogNDA1LAogICAgICAgICAgICAgICAgImNhdCI6ICJUViIsCiAgICAgICAgICAgICAgICAiZGVzYyI6ICJUViBTaG93cy9cdTdlZmNcdTgyN2EiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg1KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDcpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkW2NsYXNzPVwiZW1iZWRkZWRcIl0gPiBiID4gc3Bhblt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMSkiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMSkgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2ltZ1tAY2xhc3M9J2hpdGFuZHJ1biddIgogICAgICAgIF0sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogIk1vbmlrYURlc2lnbiIsCiAgICAibmFtZSI6ICJNb25pa2FEZXNpZ24iLAogICAgImRvbWFpbiI6ICJodHRwczovL21vbmlrYWRlc2lnbi51ay8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJwcm94eSI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInRvcnJlbnRzP3BlclBhZ2U9MTAwJm5hbWU9e2tleXdvcmR9JmNhdGVnb3JpZXNbMF09NiZjYXRlZ29yaWVzWzFdPTcmY2F0ZWdvcmllc1syXT01JmNhdGVnb3JpZXNbM109MSZjYXRlZ29yaWVzWzRdPTgmY2F0ZWdvcmllc1s1XT0yIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfSwKICAgICJicm93c2UiOiB7CiAgICAgICAgInBhdGgiOiAidG9ycmVudHM/cGVyUGFnZT0xMDAmcGFnZT17cGFnZX0iLAogICAgICAgICJzdGFydCI6IDEKICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZSN0b3JyZW50LWxpc3QtdGFibGUgPiB0Ym9keSA+IHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImEudmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3MtbmFtZSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImEudmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3MtbmFtZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInNwYW4udmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3Mtc3ViaGVhZCA+IGIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImEudmlldy10b3JyZW50LnRvcnJlbnQtbGlzdGluZ3MtbmFtZSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3RvcnJlbnRzL2Rvd25sb2FkL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQudG9ycmVudC1saXN0aW5ncy1hZ2UgPiBzcGFuLmJhZGdlLWV4dHJhIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQudG9ycmVudC1saXN0aW5ncy1zaXplID4gc3BhbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlZWRlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQudG9ycmVudC1saXN0aW5ncy1zZWVkZXJzID4gYSA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC50b3JyZW50LWxpc3RpbmdzLWxlZWNoZXJzID4gYSA+IHNwYW4iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC50b3JyZW50LWxpc3RpbmdzLWNvbXBsZXRlZCA+IGEgPiBzcGFuIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAic3Bhbi50b3JyZW50LWxpc3RpbmdzLWZyZWVsZWVjaCI6IDAsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL3NwYW5bQGNsYXNzPSdiYWRnZS1leHRyYSddW2NvbnRhaW5zKEBkYXRhLW9yaWdpbmFsLXRpdGxlLCdGcmVlJyldIgogICAgICAgIF0sCiAgICAgICAgIjJYRlJFRSI6IFtdLAogICAgICAgICJIUiI6IFtdLAogICAgICAgICJQRUVSX0NPVU5UIjogWwogICAgICAgICAgICAiLy9hW0BjbGFzcz0nYmFkZ2UtZXh0cmEgdGV4dC1ncmVlbiddW2NvbnRhaW5zKEBkYXRhLW9yaWdpbmFsLXRpdGxlLCdcdTUwNWFcdTc5Y2QnKV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogIklQVCIsCiAgICAibmFtZSI6ICJJUFQiLAogICAgImRvbWFpbiI6ICJodHRwczovL2lwdG9ycmVudHMuY29tLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogInQ/cT17a2V5d29yZH0iLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGVbaWQ9XCJ0b3JyZW50c1wiXSB0ciIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3QvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIi90L1wiXSIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjYXRlZ29yeSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiP1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZXBsYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiPyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL3QvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCIvZG93bmxvYWQucGhwL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJsc3RyaXAiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIvIgogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9lbGFwc2VkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGRpdiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGRpdiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGRpdiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInNwbGl0IiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAifCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZV9lbl9lbGFwc2VkX3BhcnNlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoOSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJzcGFuLmZyZWUiOiAwLAogICAgICAgICAgICAgICAgICAgICIqIjogMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJtaW5pbXVtcmF0aW8iOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1pbmltdW1zZWVkdGltZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogMTIwOTYwMAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9


ewogICAgImlkIjogIk5JQ0UiLAogICAgIm5hbWUiOiAiTklDRSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vd3d3Lm5pY2VwdC5uZXQvIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfZGVmYXVsdCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGVfb3B0aW9uYWwiOiB7CiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbdGl0bGVdW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSAlfXt7IGZpZWxkc1sndGl0bGVfb3B0aW9uYWwnXSB9fXslIGVsc2UgJX17eyBmaWVsZHNbJ3RpdGxlX2RlZmF1bHQnXSB9fXslIGVuZGlmICV9IgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlcGxhY2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICI/IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIiCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicXVlcnlzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICJjYXQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCJkb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInBvc3RlciI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogIiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImltZGJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYuaW1kYl8xMDAgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR0XFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2VsYXBzZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg0KSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlIjogewogICAgICAgICAgICAgICAgInRleHQiOiAieyUgaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBvciBmaWVsZHNbJ2RhdGVfYWRkZWQnXSAlfXt7IGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gaWYgZmllbGRzWydkYXRlX2VsYXBzZWQnXSBlbHNlIGZpZWxkc1snZGF0ZV9hZGRlZCddIH19eyUgZWxzZSAlfW5vd3slIGVuZGlmICV9IiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImltZy5wcm9fZnJlZSxpbWcucHJvX2ZyZWUydXAiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJvbm1vdXNlb3ZlciIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCstXFxkKy1cXGQrIFxcZCs6XFxkKzpcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJkYXRlcGFyc2UiLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICIlWS0lbS0lZCAlSDolTTolUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQiLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhYmVscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiB0YWJsZSA+IHRyID4gdGQuZW1iZWRkZWQgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogIm1pbmdqaWFvIiwKICAgICJuYW1lIjogIlx1NjYwZVx1NjU1OSIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vaGRwdC54eXovIiwKICAgICJlbmNvZGluZyI6ICJVVEYtOCIsCiAgICAicHVibGljIjogZmFsc2UsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAidG9ycmVudHMucGhwIiwKICAgICAgICAgICAgICAgICJtZXRob2QiOiAiZ2V0IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGFyYW1zIjogewogICAgICAgICAgICAic2VhcmNoIjogIntrZXl3b3JkfSIKICAgICAgICB9LAogICAgICAgICJiYXRjaCI6IHsKICAgICAgICAgICAgImRlbGltaXRlciI6ICIgIiwKICAgICAgICAgICAgInNwYWNlX3JlcGxhY2UiOiAiXyIKICAgICAgICB9CiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0cjpoYXMoXCJ0YWJsZS50b3JyZW50bmFtZVwiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZGV0YWlscy5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInJlX3NlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZCsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMAogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2F0ZWdvcnkiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIj9jYXQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogInF1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiY2F0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX2RlZmF1bHQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlX29wdGlvbmFsIjogewogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZSwKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW3RpdGxlXVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIgogICAgICAgICAgICB9LAogICAgICAgICAgICAidGl0bGUiOiB7CiAgICAgICAgICAgICAgICAidGV4dCI6ICJ7JSBpZiBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gJX17eyBmaWVsZHNbJ3RpdGxlX29wdGlvbmFsJ10gfX17JSBlbHNlICV9e3sgZmllbGRzWyd0aXRsZV9kZWZhdWx0J10gfX17JSBlbmRpZiAlfSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cImRldGFpbHMucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwb3N0ZXIiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiaW1nW2RhdGEtb3JpZ10iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJkYXRhLW9yaWciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiZG93bmxvYWQucGhwP2lkPVwiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzaXplIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDgpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDYpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibGVlY2hlcnMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQucm93Zm9sbG93Om50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfZWxhcHNlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZC5yb3dmb2xsb3c6bnRoLWNoaWxkKDQpID4gc3BhbiIsCiAgICAgICAgICAgICAgICAib3B0aW9uYWwiOiB0cnVlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkYXRlX2FkZGVkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkLnJvd2ZvbGxvdzpudGgtY2hpbGQoNCkgPiBzcGFuIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZSI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fZnJlZTJ1cCI6IDAsCiAgICAgICAgICAgICAgICAgICAgImltZy5wcm9fNTBwY3Rkb3duIjogMC41LAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzUwcGN0ZG93bjJ1cCI6IDAuNSwKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb18zMHBjdGRvd24iOiAwLjMsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiaW1nLnByb181MHBjdGRvd24ydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvX2ZyZWUydXAiOiAyLAogICAgICAgICAgICAgICAgICAgICJpbWcucHJvXzJ1cCI6IDIsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmcmVlX2RlYWRsaW5lIjogewogICAgICAgICAgICAgICAgImRlZmF1bHRfdmFsdWUiOiAieyUgaWYgZmllbGRzWydkb3dubG9hZHZvbHVtZWZhY3RvciddPT0wICV9e3ttYXhfdGltZX19eyUgZW5kaWYlfSIsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF92YWx1ZV9mb3JtYXQiOiAiJVktJW0tJWQgJUg6JU06JVMuJWYiLAogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImRpdiA+IGIgPiBzcGFuW3RpdGxlXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogInRpdGxlIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiZGF0ZXBhcnNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiAiJVktJW0tJWQgJUg6JU06JVMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJkaXYgPiBhLnRvcnJlbnRzLXRhZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInN1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQuZW1iZWRkZWQ6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2W3N0eWxlXSA+IHNwYW4iLAogICAgICAgICAgICAgICAgImNvbnRlbnRzIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikiLAogICAgICAgICAgICAgICAgInJlbW92ZSI6ICJzcGFuLGEsaW1nLGZvbnQsYiIsCiAgICAgICAgICAgICAgICAiY29udGVudHMiOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibGFiZWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IHRhYmxlLnRvcnJlbnRuYW1lID4gdHIgPiB0ZDpudGgtY2hpbGQoMikgPiBzcGFuIgogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKICAgICJwcmljZSI6IHsKICAgICAgICAiRlJFRSI6IFsKICAgICAgICAgICAgIi8vaDFbQGlkPSd0b3AnXS9iL2ZvbnRbQGNsYXNzPSdmcmVlJ10iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogWwogICAgICAgICAgICAiLy9oMVtAaWQ9J3RvcCddL2IvZm9udFtAY2xhc3M9J3R3b3VwZnJlZSddIgogICAgICAgIF0sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbCiAgICAgICAgICAgICIvL2RpdltAaWQ9J3BlZXJjb3VudCddL2JbMV0iCiAgICAgICAgXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
ewogICAgImlkIjogIkVaVFYiLAogICAgIm5hbWUiOiAiRVpUViIsCiAgICAiZG9tYWluIjogImh0dHBzOi8vZXp0di5yZS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiB0cnVlLAogICAgInByb3h5IjogdHJ1ZSwKICAgICJsYW5ndWFnZSI6ICJlbiIsCiAgICAic2VhcmNoIjogewogICAgICAgICJwYXRocyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInBhdGgiOiAic2VhcmNoL3trZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogInBhZ2Vfe3BhZ2V9IgogICAgfSwKICAgICJ0b3JyZW50cyI6IHsKICAgICAgICAibGlzdCI6IHsKICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLmZvcnVtX2hlYWRlcl9ib3JkZXIgPiB0cltuYW1lXSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBhW2hyZWYqPVwiL2VwL1wiXSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiLAogICAgICAgICAgICAgICAgImZpbHRlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJyZV9zZWFyY2giLAogICAgICAgICAgICAgICAgICAgICAgICAiYXJncyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGQrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpdGxlIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgyKSA+IGEiLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJ0aXRsZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRldGFpbHMiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDIpID4gYSIsCiAgICAgICAgICAgICAgICAiYXR0cmlidXRlIjogImhyZWYiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMykgPiBhW2hyZWYqPVwiLnRvcnJlbnRcIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZV9hZGRlZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsIjogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSA+IGZvbnQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICIqIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAidXBsb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0=
ewogICAgImlkIjogIk5ZQUEoSU5LKSIsCiAgICAibmFtZSI6ICJOWUFBKElOSykiLAogICAgImRvbWFpbiI6ICJodHRwczovL255YWEuaW5rLyIsCiAgICAiZW5jb2RpbmciOiAiVVRGLTgiLAogICAgInB1YmxpYyI6IHRydWUsCiAgICAicHJveHkiOiB0cnVlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogIj9mPTAmYz0wXzAmcT17a2V5d29yZH0iLAogICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJnZXQiCiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9LAogICAgImJyb3dzZSI6IHsKICAgICAgICAicGF0aCI6ICI/cD17cGFnZX0iLAogICAgICAgICJzdGFydCI6IDEKICAgIH0sCiAgICAidG9ycmVudHMiOiB7CiAgICAgICAgImxpc3QiOiB7CiAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50LWxpc3QgPiB0Ym9keSA+IHRyIgogICAgICAgIH0sCiAgICAgICAgImZpZWxkcyI6IHsKICAgICAgICAgICAgImlkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogImFbaHJlZio9XCIvdmlldy9cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBhIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGV0YWlscyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoMikgPiBhIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2FkIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCgzKSA+IGFbaHJlZio9XCIvZG93bmxvYWQvXCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDUpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2l6ZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJzZWVkZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg2KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxlZWNoZXJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg3KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImdyYWJzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRkOm50aC1jaGlsZCg4KSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRvd25sb2Fkdm9sdW1lZmFjdG9yIjogewogICAgICAgICAgICAgICAgImNhc2UiOiB7CiAgICAgICAgICAgICAgICAgICAgIioiOiAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQ==






ewogICAgImlkIjogInRpYW54dWUiLAogICAgIm5hbWUiOiAiXHU1OTI5XHU5NmVhXHU4YmJhXHU1NzViIiwKICAgICJkb21haW4iOiAiaHR0cHM6Ly93d3cuc2t5ZXkyLmNvbS8iLAogICAgImVuY29kaW5nIjogIlVURi04IiwKICAgICJwdWJsaWMiOiBmYWxzZSwKICAgICJwcm94eSI6IGZhbHNlLAogICAgInNlYXJjaCI6IHsKICAgICAgICAicGF0aHMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJwYXRoIjogImZvcnVtLnBocD9tb2Q9dG9ycmVudHMmY2F0PTEmc2VhcmNoPXtrZXl3b3JkfSIsCiAgICAgICAgICAgICAgICAibWV0aG9kIjogImdldCIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH0sCiAgICAiYnJvd3NlIjogewogICAgICAgICJwYXRoIjogImZvcnVtLnBocD9tb2Q9dG9ycmVudHMmcGFnZT17cGFnZX0iCiAgICB9LAogICAgInRvcnJlbnRzIjogewogICAgICAgICJsaXN0IjogewogICAgICAgICAgICAic2VsZWN0b3IiOiAidGFibGUudG9ycmVudHMgPiB0Ym9keSA+IHRyOmhhcyhcInRkLnJvd2ZvbGxvd1wiKSIKICAgICAgICB9LAogICAgICAgICJmaWVsZHMiOiB7CiAgICAgICAgICAgICJpZCI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJhW2hyZWYqPVwiL2Rvd25sb2FkLnBocD9pZD1cIl0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIiwKICAgICAgICAgICAgICAgICJmaWx0ZXJzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicmVfc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3MiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkKyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ0aXRsZSI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0YWJsZS50b3JyZW50bmFtZSA+IHRib2R5ID4gdHIgPiB0ZCA+IGFbdGl0bGVdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAidGl0bGUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXRhaWxzIjogewogICAgICAgICAgICAgICAgInNlbGVjdG9yIjogInRhYmxlLnRvcnJlbnRuYW1lID4gdGJvZHkgPiB0ciA+IHRkID4gYVt0aXRsZV0iLAogICAgICAgICAgICAgICAgImF0dHJpYnV0ZSI6ICJocmVmIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZG93bmxvYWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAiYVtocmVmKj1cIi9kb3dubG9hZC5waHA/aWQ9XCJdIiwKICAgICAgICAgICAgICAgICJhdHRyaWJ1dGUiOiAiaHJlZiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGVfYWRkZWQiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDMpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGF0ZSI6IHsKICAgICAgICAgICAgICAgICJ0ZXh0IjogInslIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gb3IgZmllbGRzWydkYXRlX2FkZGVkJ10gJX17eyBmaWVsZHNbJ2RhdGVfZWxhcHNlZCddIGlmIGZpZWxkc1snZGF0ZV9lbGFwc2VkJ10gZWxzZSBmaWVsZHNbJ2RhdGVfYWRkZWQnXSB9fXslIGVsc2UgJX1ub3d7JSBlbmRpZiAlfSIsCiAgICAgICAgICAgICAgICAiZmlsdGVycyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIjogImRhdGVwYXJzZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogIiVZLSVtLSVkICVIOiVNOiVTIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNpemUiOiB7CiAgICAgICAgICAgICAgICAic2VsZWN0b3IiOiAidGQ6bnRoLWNoaWxkKDQpIgogICAgICAgICAgICB9LAogICAgICAgICAgICAic2VlZGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNykiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWVjaGVycyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNikiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJncmFicyI6IHsKICAgICAgICAgICAgICAgICJzZWxlY3RvciI6ICJ0ZDpudGgtY2hpbGQoNSkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkb3dubG9hZHZvbHVtZWZhY3RvciI6IHsKICAgICAgICAgICAgICAgICJjYXNlIjogewogICAgICAgICAgICAgICAgICAgICJpbWcuc3BfNCI6IDAsCiAgICAgICAgICAgICAgICAgICAgIioiOiAxCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ1cGxvYWR2b2x1bWVmYWN0b3IiOiB7CiAgICAgICAgICAgICAgICAiY2FzZSI6IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICAicHJpY2UiOiB7CiAgICAgICAgIkZSRUUiOiBbCiAgICAgICAgICAgICIvL2RpdltAY2xhc3M9J3BpJ10vYltjb250YWlucyh0ZXh0KCksJ0ZSRUUnKV0iCiAgICAgICAgXSwKICAgICAgICAiMlhGUkVFIjogW10sCiAgICAgICAgIkhSIjogW10sCiAgICAgICAgIlBFRVJfQ09VTlQiOiBbXQogICAgfSwKICAgICJzeXN0ZW1fdHlwZSI6ICIiCn0=
